/**
 * 1HEED APi
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ /* tslint:disable:no-unused-variable member-ordering */

import { HttpClient, HttpEvent, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Inject, Injectable, Optional } from '@angular/core';
import { Observable } from 'rxjs';
import { Configuration } from '../configuration';
import { LoginResponse } from '../model/loginResponse';
import { RefreshTokenRequest } from '../model/refreshTokenRequest';
import { SocialLoginRequest } from '../model/socialLoginRequest';
import { VerifyTokenRequest } from '../model/verifyTokenRequest';
import { BASE_PATH } from '../variables';

@Injectable()
export class AuthenticationService {
    protected basePath = 'https://virtserver.swaggerhub.com/dungvv/1heed/1.0.0';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(
        protected httpClient: HttpClient,
        @Optional() @Inject(BASE_PATH) basePath: string,
        @Optional() configuration: Configuration
    ) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    /**
     *
     * refresh token if current token is not valid
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAuthRefreshTokenPost(body?: RefreshTokenRequest, observe?: 'body', reportProgress?: boolean): Observable<LoginResponse>;
    public apiAuthRefreshTokenPost(
        body?: RefreshTokenRequest,
        observe?: 'response',
        reportProgress?: boolean
    ): Observable<HttpResponse<LoginResponse>>;
    public apiAuthRefreshTokenPost(
        body?: RefreshTokenRequest,
        observe?: 'events',
        reportProgress?: boolean
    ): Observable<HttpEvent<LoginResponse>>;
    public apiAuthRefreshTokenPost(body?: RefreshTokenRequest, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = ['application/json'];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = ['application/json'];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<LoginResponse>(`${this.basePath}/api/auth/refresh/token`, body, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }

    /**
     *
     * verify jwt token
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAuthVerifyTokenPost(body?: VerifyTokenRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiAuthVerifyTokenPost(body?: VerifyTokenRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiAuthVerifyTokenPost(body?: VerifyTokenRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiAuthVerifyTokenPost(body?: VerifyTokenRequest, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = ['application/json'];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/auth/verify/token`, body, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }

    /**
     *
     * Login using facebook account
     * @param body pass authorization code to login
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiLoginFacebookPost(body: SocialLoginRequest, observe?: 'body', reportProgress?: boolean): Observable<LoginResponse>;
    public apiLoginFacebookPost(
        body: SocialLoginRequest,
        observe?: 'response',
        reportProgress?: boolean
    ): Observable<HttpResponse<LoginResponse>>;
    public apiLoginFacebookPost(
        body: SocialLoginRequest,
        observe?: 'events',
        reportProgress?: boolean
    ): Observable<HttpEvent<LoginResponse>>;
    public apiLoginFacebookPost(body: SocialLoginRequest, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling apiLoginFacebookPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = ['application/json'];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = ['application/json'];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<LoginResponse>(`${this.basePath}/api/login/facebook`, body, {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
}
