/**
 * 1HEED APi
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
import { HttpClient, HttpEvent, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Inject, Injectable, Optional } from '@angular/core';
import { Observable } from 'rxjs';

import { Configuration } from '../configuration';
import { AccessToken } from '../model/accessToken';
import { UserInfo } from '../model/userInfo';
import { BASE_PATH } from '../variables';



@Injectable()
export class AuthenticationService {

    protected basePath = 'https://virtserver.swaggerhub.com/dungvv/1heed/1.0.0';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     *
     * Login using facebook account
     * @param authorizationCode pass authorization code to login
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiOauth2LoginFacebookPost(authorizationCode: AccessToken, observe?: 'body', reportProgress?: boolean): Observable<UserInfo>;
    public apiOauth2LoginFacebookPost(authorizationCode: AccessToken, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserInfo>>;
    public apiOauth2LoginFacebookPost(authorizationCode: AccessToken, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserInfo>>;
    public apiOauth2LoginFacebookPost(authorizationCode: AccessToken, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (authorizationCode === null || authorizationCode === undefined) {
            throw new Error('Required parameter authorizationCode was null or undefined when calling apiOauth2LoginFacebookPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<UserInfo>(`${this.basePath}/api/oauth2/login/facebook`,
            authorizationCode,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
